@page "/"

@layout SideBarLayout

@inject ICategoryDTOService CategoryService
@inject IBlogPostDTOService BlogPostService


<PageTitle>Home | All Blog Posts</PageTitle>

<!-- Blog posts -->
@if (blogPosts.Data.Count() > 0)
{
    <h1 class="pb-3 pb-lg-4">All Blogs</h1>

    <!-- Post -->
    @foreach (BlogPostDTO blogPost in blogPosts.Data)
    {
        @if (blogPost.IsPublished == true && blogPost.IsDeleted == false)
        {
            <BlogCard BlogPost="blogPost" />
        }
    }



    <Paginator
               TotalPages="blogPosts.TotalPages" />

    <TagSelectionCard Tags="allPublishedTags" />
}
else
{
    <div class="page-wrapper">
        <div class="container d-flex flex-column justify-content-center min-vh-100 py-5">
            <lottie-player src="assets/json/animation-404-light.json" class="d-dark-mode-none mt-n5" background="transparent" speed="1" loop autoplay></lottie-player>
            <lottie-player class="d-none d-dark-mode-block mt-n5" src="assets/json/animation-404-dark.json" background="transparent" speed="1" loop autoplay></lottie-player>
            <div class="text-center pt-4 mt-lg-2">
                <h1 class="display-5">Page not found</h1>
                <p class="fs-lg pb-2 pb-md-0 mb-4 mb-md-5">The page you are looking for was moved, removed or might never existed.</p>
                <AuthorizeView Roles="Author">
                    <Authorized >
                        <a class="btn btn-lg btn-primary" href="/author/blogposts">Add some posts and your page could look like:</a>
                        <img src="/Images/EmptyHomeScreenshot.png" />
                    </Authorized>
                    <NotAuthorized>
                        <p class="fs-lg pb-2 pb-md-0 mb-4 mb-md-5">The page you are looking for was moved, removed or posts have not been added.</p>
                    </NotAuthorized>
                </AuthorizeView>
            </div>
        </div>
    </div>
}


@code {
    #region Parameter
    [SupplyParameterFromQuery]
    public int Page { get; set; }
    #endregion

    #region State
    bool currentPageIsGenerated = false;
    private int pageSize = 4;

    private PagedList<BlogPostDTO> blogPosts = new PagedList<BlogPostDTO>();
    private List<TagDTO> allPublishedTags = [];
    #endregion

    #region Methods
    protected override async Task OnParametersSetAsync()
    {
        if (Page < 1) Page = 1;

        try
        {
            //Get All Posts
            blogPosts = await BlogPostService.GetPublishedBlogPostsAsync(Page, pageSize);

            foreach (BlogPostDTO post in blogPosts.Data)
            {
                foreach (TagDTO tag in post.Tags)
                {
                    if (!allPublishedTags.Any(t => t.Id == tag.Id))
                    {
                        allPublishedTags.Add(tag);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

    }

    #endregion
}