@using CloudContacts.Client.Components.Helper


@if (Category is not null)
{
    <EditForm Model="Category" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <div class="border  bg-light shadow-lg border-2 py-2">
            <div class="row p-2 g-3">
                <div class="col-12 col-md-4">

                    <div class="square-img-container">
                        <img src="@(string.IsNullOrEmpty(Category.ImageUrl) ? ImageHelper.DefaultContactImage : Category.ImageUrl)"
                             class="square-img" />
                    </div>
                    <div>
                        <InputFile OnChange="OnFileChange" class="form-control mt-2" accept=".png, .jpg, .jpeg, .svg" />
                        <span class="text-danger"> @imageError </span>
                    </div>

                    <div class="row g-2" action="#">
                        <div class="col-12 col-md-6">
                            <label for="Name" class="form-label">
                                Category Name
                            </label>
                            <InputText @bind-Value="Category.Name"
                                       id="Name"
                                       class="form-control"
                                       placeholder="Category Name"
                                       aria-label="Category Name" />
                            <ValidationMessage For="() => Category.Name" />
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="Description" class="form-label">
                                Category Description
                            </label>
                            <InputText @bind-Value="Category.Description"
                                       id="Description"
                                       class="form-control"
                                       placeholder="Category Description"
                                       aria-label="Category Description" />
                            <ValidationMessage For="() => Category.Description" />
                        </div>
                    </div>
                    <div class="col-12 hstack justify-content-end gap-3">
                        <div class="text-end">
                            <a class="btn btn-lg btn-outline-secondary" href="/categories">
                                Cancel
                            </a>
                        </div>
                        <div class="text-end">
                            <button class="btn btn-lg btn-primary" type="submit">
                                Save
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    #region  parameter
    [Parameter, EditorRequired]
    public CategoryDTO? Category { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<CategoryDTO> OnSubmit { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }
    #endregion


    #region  state
    private UserInfo? userInfo;

    private string? imageError;

    #endregion



    #region  methods
    private async Task HandleSubmit()
    {
        await OnSubmit.InvokeAsync(Category);
    }

    private async Task OnFileChange(InputFileChangeEventArgs changeEvent)
    {
        imageError = null;

        if (changeEvent.File is null)
        {
            Category!.ImageUrl = ImageHelper.DefaultContactImage;
        }
        else if (changeEvent.File.Size > ImageHelper.MaxFileSize)
        {
            imageError = "Images must be less than 5 MB";
        }
        else
        {
            try
            {
                Category!.ImageUrl = await ImageHelper.GetDataUrl(changeEvent.File);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
                imageError = "Could not read the selected file. Please select a diffferent image.";
            }
        }
    }
    #endregion
}
