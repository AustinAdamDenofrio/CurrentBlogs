@inject ICategoryDTOService CategoryService

@if (Post is not null)
{
    <EditForm Model="Post" OnValidSubmit="HandleSubmit" class="row">
        <DataAnnotationsValidator />
        <div class="col-lg-4">
            <div class="mb-2">
                <label class="form-label">Title</label>
                <InputText class="form-control" @bind-Value="Post.Title"></InputText>
                <ValidationMessage For="() => Post.Title" />
            </div>
            <div class="mb-2">
                <label class="form-label">Description</label>
                <InputText class="form-control" @bind-Value="Post.Abstract"></InputText>
                <ValidationMessage For="() => Post.Abstract" />
            </div>
            <div class="mb-2">
                <label class="form-label">Category</label>
                <InputSelect class="form-control" @bind-Value="Post.CategoryId">
                    <option value="0">Select a category...</option>
                    @foreach (CategoryDTO category in categories.Data)
                    {
                        <option value="@category.Id">
                            @category.Name
                        </option>
                    }

                </InputSelect>
                <ValidationMessage For="() => Post.CategoryId" />
            </div>
            <div class="mb-2">
                <img class="img-fluid rounded-5" style="max-height: 350px"
                     src="@(string.IsNullOrEmpty(Post.ImageUrl) ? ImageHelper.DefaultBlogImage : Post.ImageUrl)" />
                <InputFile OnChange="OnFileChange" class="form-control mt-3" accept=".png,.jpg,.jpeg,.svg" />

            </div>
        </div>
        <div class="col-lg-8 vstack gap-2">
            <div class="flex-fill vstack">
                <label class="form-label">Content</label>
                <TinyMCE.Blazor.Editor ScriptSrc="/tinymce/tinymce.min.js"
                                       @bind-Value="Post.Content"
                                       Field="() => Post.Content"
                                       ClassName="rich-text-editor"
                                       Conf="editorConfig" />
                <ValidationMessage For="() => Post.Content" />
            </div>
            @*tag*@
            <div class="mb-2">
                <label class="form-label">Tags</label>
                <InputText @bind-Value="tagNames" class="form-control" />
            </div>
        </div>
        <div class="col-12 text-end">
            <div class="form-check">
                <label class="form-check-label">
                    <InputCheckbox class="form-check-input" @bind-Value="Post.IsPublished">
                    </InputCheckbox>
                    Publish?
                </label>
            </div>
            <a type="button" class="btn btn-outline-secondary me-2" href="/">
                Cancel
            </a>

            @if (Post.IsPublished == false)
            {
                <button type="submit" class="btn btn-outline-primary">
                    Save as Draft
                </button>
            }
            else
            {
                <button type="submit" class="btn btn-primary">
                    Save &amp; Publish
                </button>
            }
        </div>
        <ValidationSummary />
    </EditForm>

}


@code {
    #region Parameter
    [Parameter, EditorRequired]
    public BlogPostDTO? Post { get; set; }


    [Parameter, EditorRequired]
    public EventCallback<BlogPostDTO> OnSubmit { get; set; }

    #endregion

    #region State
    private PagedList<CategoryDTO> categories = new PagedList<CategoryDTO>();

    private string? imageError;

    private string tagNames = string.Empty;

    private int page = 1;
    private int pageSize = 10;

    // tinyMCE config
    private static readonly Dictionary<string, object> editorConfig = new()
    {
        { "toolbar", "undo redo | bold italic underline | link codesample " },
        { "plugins", "anchor autolink link charmap preview table codesample" },
        { "default_link_target", "_blank" },
        { "link_assume_external_targets", true },
        { "link_context_toolbar", true },
        { "codesample_languages", new object[] {
                new { text = "HTML/XML", value = "markup" },
                new { text = "JavaScript", value = "javascript" },
                new { text = "CSS", value = "css" },
                new { text = "C#", value = "csharp" },
                new { text = "Razor", value = "razor" },
                new { text = "JSON", value = "json" },
    }
        },
        { "codesample_global_prismjs", true },
        { "promotion", false },
        { "height", "100%" },
    };
    #endregion


    #region Method
    protected override async Task OnInitializedAsync()
    {
        try
        {
            categories = await CategoryService.GetAllCategoriesAsync(page, pageSize);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }


    protected override void OnParametersSet()
    {
        if (Post!.Tags is not null)
        {
            tagNames = string.Join(", ", Post.Tags.Select(t => t.Name));
        }
    }


    private async Task HandleSubmit()
    {
        try
        {
            IEnumerable<string> listOfNames = tagNames.Split(',', StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries);

            Post!.Tags = [.. listOfNames.Select(name => new TagDTO() { Name = name })];

            await OnSubmit.InvokeAsync(Post);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }


    private async Task OnFileChange(InputFileChangeEventArgs changeEvent)
    {
        imageError = null;

        if (changeEvent.File is null)
        {
            Post!.ImageUrl = ImageHelper.DefaultBlogImage;
        }
        else if (changeEvent.File.Size > ImageHelper.MaxFileSize)
        {
            imageError = "Images must be less than 5 MB";
        }
        else
        {
            try
            {
                Post!.ImageUrl = await ImageHelper.GetDataUrl(changeEvent.File);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
                imageError = "Could not read the selected file. Please select a different image.";
            }
        }
    }
    #endregion
}
