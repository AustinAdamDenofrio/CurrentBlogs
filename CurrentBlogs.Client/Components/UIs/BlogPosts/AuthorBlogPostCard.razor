@if (BlogPost is not null)
{
    <article class="row g-0 border-0 mb-4">
        <a class="col-sm-5 bg-repeat-0 bg-size-cover bg-position-center rounded-5" href="#" style="background-image: url(@BlogPost.ImageUrl); min-height: 14rem" aria-label="Post image">
        </a>
        <div class="col-sm-7">
            <div class="pt-4 pb-sm-4 ps-sm-4 pe-lg-4">
                <h3>
                    <a href="#">@BlogPost.Title</a>
                </h3>
                <p class="d-sm-none d-md-block">
                    @* Trailling if text is to large *@
                    @BlogPost.Abstract
                </p>
                <div class="mb-3">
                    @if(BlogPost.IsPublished == true && BlogPost.IsDeleted == false){
                        @if (isDeleting == false)
                        {
                            <div class="fs-4 d-flex justify-content-start">
                                <a class="me-3 btn btn-sm btn-outline-warning" href="/blogpost/edit/@BlogPost.Id">Edit</a>

                                <a class="me-3 editIcons" role="button" @onclick="() => isDeleting = true">
                                    <i class="ai-trash text-danger small"></i>
                                </a>
                            </div>
                        }
                        else
                        {
                            <div class="text-danger">Are you sure you want to delete this Contact?</div>
                            <div class="">
                                <button class="btn btn-sm btn-secondary" @onclick="() => isDeleting = false">Cancel</button>
                                <button class="btn btn-sm btn-danger me-1" @onclick="async () => await DeleteBlogPostAsync(BlogPost.Id)">Delete</button>
                            </div>
                        }
                    }
                    else if (BlogPost.IsPublished == false && BlogPost.IsDeleted == false)
                    {
                        @if (isDeleting == false)
                        {
                            <div class="fs-4 d-flex justify-content-start ">
                                <a class="me-3 btn btn-sm btn-outline-warning" href="/blogpost/edit/@BlogPost.Id">Edit</a>
                                <a class="me-3 editIcons btn btn-outline-danger btn-sm" role="button" @onclick="() => isDeleting = true">
                                    Delete
                                </a>

                                <a class="ms-auto btn btn-sm btn-outline-secondary" role="button" @onclick="() => BlogPost.IsPublished = true">Publish</a>
                            </div>
                        }
                        else
                        {
                            <div class="text-danger">Are you sure you want to delete this Contact?</div>
                            <div class="">
                                <button class="btn btn-sm btn-secondary" @onclick="() => isDeleting = false">Cancel</button>
                                <button class="btn btn-sm btn-danger me-1" @onclick="async () => await DeleteBlogPostAsync(BlogPost.Id)">Delete</button>
                            </div>
                        }
                    }
                    else if (BlogPost.IsDeleted == true)
                    {
                        @if (isDeleting == false)
                        {
                            <div class="fs-4 d-flex justify-content-start ">
                                <a class="me-3 editIcons btn btn-primary btn-sm" role="button" @onclick="() => isDeleting = true">
                                    Restore Post
                                </a>
                            </div>
                        }
                        else
                        {
                            <div class="text-danger">Are you sure you want to delete this Contact?</div>
                            <div class="">
                                <button class="btn btn-sm btn-secondary" @onclick="() => isDeleting = false">Cancel</button>
                                @*Run a restore method that updates the blogpost, navigates blogpost page, and gets the updted blogs from db. This method needs to be injected*@
                                <button class="btn btn-sm btn-danger me-1" role="button" @onclick="() => BlogPost.IsDeleted = false">Restore Post</button>
                            </div>
                        }
                    }
                </div>
                <div class="d-flex flex-wrap align-items-center mt-n2">
                    <a class="nav-link text-body-secondary fs-sm fw-normal p-0 mt-2 me-3" href="#">
                        6
                        <i class="ai-share fs-lg ms-1"></i>
                    </a>
                    <a class="nav-link text-body-secondary fs-sm fw-normal d-flex align-items-end p-0 mt-2" href="#">
                        @BlogPost.Comments.Count
                        <i class="ai-message fs-lg ms-1"></i>
                    </a>
                    <span class="fs-xs opacity-20 mt-2 mx-3">|</span>
                    <span class="fs-sm text-body-secondary mt-2">@BlogPost.Updated @*Format to only include hours*@ hours ago</span>
                    <span class="fs-xs opacity-20 mt-2 mx-3">|</span>
                    <a class="badge text-nav fs-xs border mt-2" href="#">
                        @BlogPost.Category?.Name
                    </a>
                </div>
            </div>
        </div>
    </article>

}


@code {
    #region Parameter

    [Parameter, EditorRequired]
    public BlogPostDTO? BlogPost { get; set; }

    [Parameter]
    public EventCallback<int> OnDelete { get; set; }

    #endregion

    #region State

    private UserInfo? userInfo;

    //Toggles confirm deletion
    bool isDeleting = false;
    #endregion

    #region Methods

    private async Task DeleteBlogPostAsync(int blogPostId)
    {
        await OnDelete.InvokeAsync(BlogPost!.Id);
        isDeleting = false;
    }
    #endregion
}
