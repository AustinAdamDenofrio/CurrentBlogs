@page "/author/categories"
@using CurrentBlogs.Client.Components.Helper
@using CurrentBlogs.Client.Components.Services.Interfaces

@attribute [Authorize(Roles = "Author")]

@inject ICategoryDTOService CategoryService
@rendermode InteractiveServer

<PageTitle>Current Blogs | Categories</PageTitle>

    @*Add new Categories*@
<div class="d-flex justify-content-center  justify-content-sm-end justify-content-md-start mb-3">
    <a href="/categories/create" class="btn btn-primary ">
        <i class="ai-arrow-down d-sm-none"> </i>
        Add category
        <i class="ai-arrow-down d-sm-none"> </i>
    </a>
</div>

    @*Generate Categories on the Page*@
    @foreach (CategoryDTO category in categories.Data)
{
    <div @key="category.Id" class="col-xl-8">
        <AuthorCategoryCard Category="category"
                            OnDelete="DeleteCategory" />
    </div>
}



@code {
    #region Parameter

    #endregion

    #region State
    private CategoryDTO formCategory = new CategoryDTO();
    private PagedList<CategoryDTO> categories = new PagedList<CategoryDTO>();

    private int page = 1;
    private int pageSize = 10;


    //Toggles confirm deletion
    bool isDeleting = false;
    #endregion

    #region Methods

    protected override async Task OnInitializedAsync()
    {
        try
        {
            categories = await CategoryService.GetAllCategoriesAsync(page, pageSize);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }


    private async Task DeleteCategory(int categoryId)
    {
        try
        {
            await CategoryService.DeleteCategoryAsync(categoryId);

            categories = await CategoryService.GetAllCategoriesAsync(page, pageSize);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    #endregion
}