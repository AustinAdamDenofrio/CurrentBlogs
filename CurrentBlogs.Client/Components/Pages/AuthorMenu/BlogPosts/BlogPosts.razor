@page "/author/blogposts"

@using CurrentBlogs.Client.Components.Helper
@using CurrentBlogs.Client.Components.Services.Interfaces

@attribute [Authorize(Roles = "Author")]

@inject IBlogPostDTOService BlogService
@rendermode InteractiveServer

<PageTitle>Current Blogs | Categories</PageTitle>

        @*Add new BlogPosts*@
<div class="d-flex justify-content-center justify-content-sm-end justify-content-md-start mb-3">
    <a href="/blogposts/create" class="btn btn-primary ">
        <i class="ai-arrow-down d-sm-none"> </i>
        Add Post
        <i class="ai-arrow-down d-sm-none"> </i>
    </a>
    <div class="btn-group ms-auto">
        <button type="button" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
            View
        </button>
        <ul class="dropdown-menu bg-secondary">
            <li><a class="dropdown-item" role="button" @onclick="() => selectedView = SelectedView.All">View All</a></li>
            <li><a class="dropdown-item" role="button" @onclick="() => selectedView = SelectedView.Published">Published</a></li>
            <li><a class="dropdown-item" role="button" @onclick="() => selectedView = SelectedView.Drafts">Drafts</a></li>
            <li><hr class="dropdown-divider"></li>
            <li><a class="dropdown-item text-danger" role="button" @onclick="() => selectedView = SelectedView.Deleted">Recently Deleted</a></li>
        </ul>
    </div>
</div>

        @if (selectedView == SelectedView.All)
{
    <h2 class="">Showing: All Posts </h2>
    @foreach (BlogPostDTO blogPost in blogPosts.Data.Where(bp => bp.IsDeleted == false))
    {
        <div @key="blogPost.Id">
            <AuthorBlogPostCard BlogPost="blogPost"
                                OnDelete="DeleteBlogPostAsync" />
        </div>
    }
}
else if (selectedView == SelectedView.Published)
{
    <h2 class="">Showing: Published </h2>
    @foreach (BlogPostDTO blogPost in blogPosts.Data.Where(bp => bp.IsDeleted == false && bp.IsPublished == true))
    {
        <div @key="blogPost.Id">
            <AuthorBlogPostCard BlogPost="blogPost"
                                OnDelete="DeleteBlogPostAsync" />
        </div>
    }
}
else if (selectedView == SelectedView.Drafts)
{
    <h2 class="">Showing: Drafts </h2>
    @foreach (BlogPostDTO blogPost in blogPosts.Data.Where(bp => bp.IsDeleted == false && bp.IsPublished == false))
    {
        <div @key="blogPost.Id">
            <AuthorBlogPostCard BlogPost="blogPost"
                                OnDelete="DeleteBlogPostAsync"
                                OnPublish="PublishBlogPostAsync" />
        </div>
    }
}
else if (selectedView == SelectedView.Deleted)
{
    <h2>Showing:<span class="text-danger"> Recently Deleted</span></h2>
    @foreach (BlogPostDTO blogPost in blogPosts.Data.Where(bp => bp.IsDeleted == true))
    {
        <div @key="blogPost.Id">
            <AuthorBlogPostCard BlogPost="blogPost"
                                OnDelete="DeleteBlogPostAsync"
                                OnRestore="RestoreBlogPostAsync" />
        </div>
    }
}


@code {
    #region Parameter

    #endregion

    #region State
    private PagedList<BlogPostDTO> blogPosts = new PagedList<BlogPostDTO>();
    private string? imageError;

    //Toggles confirm deletion
    bool isDeleting = false;

    private enum SelectedView
    {
        All,
        Published,
        Drafts,
        Deleted
    }

    private SelectedView selectedView = SelectedView.All;
    #endregion

    #region Methods

    protected override async Task OnInitializedAsync()
    {
        //Get All Categories
        blogPosts = await BlogService.GetPublishedBlogPostsAsync(1, 5);
    }


    private async Task DeleteBlogPostAsync(int blogPostId)
    {
        try
        {
            await BlogService.DeleteBlogPostAsync(blogPostId);

            blogPosts = await BlogService.GetPublishedBlogPostsAsync(1, 5);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }


    private async Task RestoreBlogPostAsync(BlogPostDTO formBlogPost)
    {
        try
        {
            await BlogService.UpdateBlogPostAsync(formBlogPost);

            blogPosts = await BlogService.GetPublishedBlogPostsAsync(1, 5);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task PublishBlogPostAsync(BlogPostDTO formBlogPost)
    {
        try
        {
            await BlogService.UpdateBlogPostAsync(formBlogPost);

            blogPosts = await BlogService.GetPublishedBlogPostsAsync(1, 5);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
    #endregion
}
